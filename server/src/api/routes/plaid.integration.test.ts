// server/src/api/routes/plaid.integration.test.ts

import request from 'supertest';
import express, { Express } from 'express';
import { sign } from 'jsonwebtoken';
import { mocked } from 'jest-mock';

// The module we need to mock
import plaidClient from '../../config/plaid';
// The main router that contains all our application's routes
import mainRouter from './index';
import { errorHandler } from '../../middleware/error.middleware';

// --- Mock the Plaid Client ---
// This tells Jest to replace the actual plaidClient with a mock
// for the duration of this test file.
jest.mock('../../config/plaid');

// Helper to type our mocked client
const mockedPlaidClient = mocked(plaidClient);

describe('Plaid Integration Tests: POST /api/v1/plaid/exchange-public-token', () => {
    let app: Express;
    let validToken: string;

    beforeAll(() => {
        // Create a test Express app instance
        app = express();

        // Add necessary middleware to parse JSON and handle errors,
        // mimicking the setup in src/index.ts 
        app.use(express.json());
        app.use(mainRouter);
        app.use(errorHandler);

        // Generate a valid JWT for authenticated requests
        const JWT_SECRET = process.env.JWT_SECRET as string;
        validToken = sign({ sub: 'user-id-123' }, JWT_SECRET, { expiresIn: '1h' });
    });

    beforeEach(() => {
        // Reset mocks before each test to ensure test isolation
        jest.clearAllMocks();
    });

    it('should return 202 Accepted and the new institution on successful token exchange', async () => {
        // --- ARRANGE ---
        // 1. Define the mock responses from the Plaid client
        const mockExchangeResponse = { data: { access_token: 'test-access-token', item_id: 'test-item-id' } };
        const mockItemGetResponse = { data: { item: { institution_id: 'ins_123' } } };
        const mockInstitutionGetResponse = { data: { institution: { name: 'Test Bank' } } };

        // 2. Configure the mock implementations for this specific test
        mockedPlaidClient.itemPublicTokenExchange.mockResolvedValue(mockExchangeResponse);
        mockedPlaidClient.itemGet.mockResolvedValue(mockItemGetResponse);
        mockedPlaidClient.institutionsGetById.mockResolvedValue(mockInstitutionGetResponse);

        // --- ACT ---
        // 3. Make the authenticated HTTP request to the endpoint
        const response = await request(app)
            .post('/api/v1/plaid/exchange-public-token')
            .set('Authorization', `Bearer ${validToken}`)
            .send({ publicToken: 'test-public-token' });

        // --- ASSERT ---
        // 4. Verify the HTTP response is correct as per the API spec 
        expect(response.status).toBe(202);

        // 5. Verify the response body contains the newly created institution data
        expect(response.body).toMatchObject({
            // id is generated by the DB, so we just check it exists
            id: expect.any(Number),
            plaid_item_id: 'test-item-id',
            plaid_institution_id: 'ins_123',
            institution_name: 'Test Bank',
            // The API spec says the initial status should be 'syncing' or similar 
            // The current implementation defaults to 'good', which we capture here. 
            // The refactor will align this with the spec.
            sync_status: 'good',
            user_id: 'user-id-123', // This should be the ID from our test token
        });

        // 6. Verify that our service called the Plaid client correctly
        expect(mockedPlaidClient.itemPublicTokenExchange).toHaveBeenCalledWith({
            public_token: 'test-public-token',
        });
        expect(mockedPlaidClient.itemGet).toHaveBeenCalledWith({
            access_token: 'test-access-token',
        });
    });

    it('should return 401 Unauthorized if no auth token is provided', async () => {
        // --- ACT ---
        // Make a request to the endpoint *without* the Authorization header
        const response = await request(app)
            .post('/api/v1/plaid/exchange-public-token')
            .send({ publicToken: 'test-public-token' });

        // --- ASSERT ---
        // 1. Verify the server rejected the request with a 401 status
        expect(response.status).toBe(401);

        // 2. Verify the error response body has the correct structure and code
        expect(response.body.error.code).toBe('UNAUTHORIZED');

        // 3. Critically, verify that no calls were made to the Plaid API,
        // ensuring the request was blocked before hitting the service logic.
        expect(mockedPlaidClient.itemPublicTokenExchange).not.toHaveBeenCalled();
    });
});
